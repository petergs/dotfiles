#!/usr/bin/env python3

import urllib.request
import urllib.parse
import urllib.error
import argparse
import json

def urlreq(method: str, url: str, headers: dict = {}, data: dict | None = None) -> str:
    encoded_data = None
    if data is not None:
        if method == "GET":
            # urlencode data as path parameters
            params: str = urllib.parse.urlencode(data)
            url = f"{url}?{params}"
        else:
            encoded_data: bytes | None = urllib.parse.urlencode(data).encode("utf-8")

    request = urllib.request.Request(
        url=url, data=encoded_data, headers=headers, method=method
    )

    with urllib.request.urlopen(request) as response:
        return response.read().decode("utf-8")

def cli() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="List subdomains returned by certificate transparency logs (via crt.sh)")
    parser.add_argument("domain", nargs='+', type=str, help="List of domains to query")
    return parser

if __name__ == "__main__":
    args = cli().parse_args()

    if args.domain:
        for domain in args.domain:
            try:
                r = urlreq(method="GET", url="https://crt.sh/json", data={"q": domain})
            except urllib.error.HTTPError as e:
                print(f"The server couldn't fulfill the request. \n Error code: {e.code}")
            except urllib.error.URLError as e:
                print(f"We failed to reach a server. \n Reason: {e.reason}")
            else:
                r = json.loads(r)
                results = [result['name_value'] for result in r]
                for result in list(set(results)):
                    print(result)

    else:
        cli().print_usage()
        exit(0)
